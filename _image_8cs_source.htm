<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>zbar-sharp: libzbar-cil/Image.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Packages</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>libzbar-cil/Image.cs</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment"> *  Copyright 2009 (c) Jonas Finnemann Jensen &lt;jopsen@gmail.com&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> *  Copyright 2007-2009 (c) Jeff Brown &lt;spadix@users.sourceforge.net&gt;</span>
<a name="l00004"></a>00004 <span class="comment"> * </span>
<a name="l00005"></a>00005 <span class="comment"> *  This file is part of the ZBar CIL Wrapper.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> *  The ZBar CIL Wrapper is free software; you can redistribute it</span>
<a name="l00008"></a>00008 <span class="comment"> *  and/or modify it under the terms of the GNU Lesser Public License as</span>
<a name="l00009"></a>00009 <span class="comment"> *  published by the Free Software Foundation; either version 2.1 of</span>
<a name="l00010"></a>00010 <span class="comment"> *  the License, or (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> *  The ZBar CIL Wrapper is distributed in the hope that it will be</span>
<a name="l00013"></a>00013 <span class="comment"> *  useful, but WITHOUT ANY WARRANTY; without even the implied warranty</span>
<a name="l00014"></a>00014 <span class="comment"> *  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment"> *  GNU Lesser Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> *  You should have received a copy of the GNU Lesser Public License</span>
<a name="l00018"></a>00018 <span class="comment"> *  along with the ZBar CIL Wrapper; if not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> *  Software Foundation, Inc., 51 Franklin St, Fifth Floor,</span>
<a name="l00020"></a>00020 <span class="comment"> *  Boston, MA  02110-1301  USA</span>
<a name="l00021"></a>00021 <span class="comment"> * </span>
<a name="l00022"></a>00022 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="keyword">using</span> System;
<a name="l00025"></a>00025 <span class="keyword">using</span> System.Runtime.InteropServices;
<a name="l00026"></a>00026 <span class="keyword">using</span> System.Collections.Generic;
<a name="l00027"></a>00027 <span class="keyword">using</span> System.Drawing;
<a name="l00028"></a>00028 <span class="keyword">using</span> System.Drawing.Imaging;
<a name="l00029"></a>00029 <span class="keyword">using</span> System.IO;
<a name="l00030"></a>00030 
<a name="l00031"></a><a class="code" href="namespace_z_bar.htm">00031</a> <span class="keyword">namespace </span>ZBar
<a name="l00032"></a>00032 {
<a name="l00036"></a><a class="code" href="class_z_bar_1_1_image.htm">00036</a>     <span class="keyword">public</span> <span class="keyword">class </span><a class="code" href="class_z_bar_1_1_image.htm" title="Representation of an image in ZBar.">Image</a> : IDisposable
<a name="l00037"></a>00037     {
<a name="l00041"></a>00041         <span class="keyword">private</span> IntPtr handle = IntPtr.Zero;
<a name="l00042"></a>00042         
<a name="l00053"></a>00053         <span class="keyword">internal</span> <a class="code" href="class_z_bar_1_1_image.htm#a14d5c7f23b42a92a0af3f4295c9f0bb6" title="Create/allocate a new uninitialized image.">Image</a>(IntPtr handle, <span class="keywordtype">bool</span> incRef){
<a name="l00054"></a>00054             this.handle = handle;
<a name="l00055"></a>00055             <span class="keywordflow">if</span>(this.handle == IntPtr.Zero)
<a name="l00056"></a>00056                 <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Can&#39;t create an image from a null pointer!&quot;</span>);
<a name="l00057"></a>00057             <span class="comment">//If we must increment the reference counter here</span>
<a name="l00058"></a>00058             <span class="keywordflow">if</span>(incRef)
<a name="l00059"></a>00059                 zbar_image_ref(this.handle, 1);
<a name="l00060"></a>00060         }
<a name="l00061"></a>00061         
<a name="l00069"></a><a class="code" href="class_z_bar_1_1_image.htm#a14d5c7f23b42a92a0af3f4295c9f0bb6">00069</a>         <span class="keyword">public</span> <a class="code" href="class_z_bar_1_1_image.htm#a14d5c7f23b42a92a0af3f4295c9f0bb6" title="Create/allocate a new uninitialized image.">Image</a>(){
<a name="l00070"></a>00070             this.handle = zbar_image_create();
<a name="l00071"></a>00071             <span class="keywordflow">if</span>(this.handle == IntPtr.Zero)
<a name="l00072"></a>00072                 <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Failed to create new image!&quot;</span>);
<a name="l00073"></a>00073         }
<a name="l00074"></a>00074         
<a name="l00085"></a><a class="code" href="class_z_bar_1_1_image.htm#a69b0f1c71825f66a9c77852fb6537451">00085</a>         <span class="keyword">public</span> <a class="code" href="class_z_bar_1_1_image.htm#a69b0f1c71825f66a9c77852fb6537451" title="Create image from an instance of System.Drawing.Image.">Image</a>(System.Drawing.Image image) : this() {
<a name="l00086"></a>00086             Byte[] data = <span class="keyword">new</span> byte[image.Width * image.Height * 3];
<a name="l00087"></a>00087             <span class="comment">//Convert the image to RBG3</span>
<a name="l00088"></a>00088             <span class="keyword">using</span>(Bitmap bitmap = <span class="keyword">new</span> Bitmap(image.Width, image.Height, PixelFormat.Format24bppRgb)){
<a name="l00089"></a>00089                 <span class="keyword">using</span>(Graphics g = Graphics.FromImage(bitmap)){
<a name="l00090"></a>00090                     g.PageUnit = GraphicsUnit.Pixel;
<a name="l00091"></a>00091                     g.DrawImageUnscaled(image, 0, 0);
<a name="l00092"></a>00092                 }
<a name="l00093"></a>00093                 <span class="keyword">using</span>(MemoryStream ms = <span class="keyword">new</span> MemoryStream()){
<a name="l00094"></a>00094                     bitmap.Save(ms, ImageFormat.Bmp);
<a name="l00095"></a>00095                     ms.Seek(54, SeekOrigin.Begin);
<a name="l00096"></a>00096                     ms.Read(data, 0, data.Length);
<a name="l00097"></a>00097                 }
<a name="l00098"></a>00098             }
<a name="l00099"></a>00099             <span class="comment">//Set the data</span>
<a name="l00100"></a>00100             this.<a class="code" href="class_z_bar_1_1_image.htm#ac97bf8ffc8e26659b1109f7e2cbee942">Data</a> = data;
<a name="l00101"></a>00101             this.<a class="code" href="class_z_bar_1_1_image.htm#a6a99dfc7a88918bdaefc378a7a2b3b91">Width</a> = (uint)image.Width;
<a name="l00102"></a>00102             <span class="keyword">this</span>.Height = (uint)image.Height;
<a name="l00103"></a>00103             this.<a class="code" href="class_z_bar_1_1_image.htm#a7b164d56358cf99d49bcf9e0fc6d76f9">Format</a> = <a class="code" href="class_z_bar_1_1_image.htm#abf54f21f8750abd47e89571eb7abff81" title="Get FourCC code from four chars.">FourCC</a>(<span class="charliteral">&#39;R&#39;</span>, <span class="charliteral">&#39;G&#39;</span>, <span class="charliteral">&#39;B&#39;</span>, <span class="charliteral">&#39;3&#39;</span>);
<a name="l00104"></a>00104         }
<a name="l00105"></a>00105         
<a name="l00112"></a><a class="code" href="class_z_bar_1_1_image.htm#ad74db73d4434e44082b6e04caa64e569">00112</a>         <span class="keyword">public</span> <a class="code" href="class_z_bar_1_1_image.htm#ad74db73d4434e44082b6e04caa64e569" title="Load image from file in the same format as written by Dump().">Image</a>(<span class="keywordtype">string</span> filename){
<a name="l00113"></a>00113             this.handle = zbar_image_read(filename);
<a name="l00114"></a>00114             <span class="keywordflow">if</span>(this.handle == IntPtr.Zero)
<a name="l00115"></a>00115                 <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Failed to load image from: &quot;</span> + filename);
<a name="l00116"></a>00116         }
<a name="l00117"></a>00117         
<a name="l00121"></a>00121         <span class="keyword">internal</span> IntPtr Handle{
<a name="l00122"></a>00122             <span class="keyword">get</span>{
<a name="l00123"></a>00123                 <span class="keywordflow">return</span> this.handle;
<a name="l00124"></a>00124             }
<a name="l00125"></a>00125         }
<a name="l00126"></a>00126         
<a name="l00127"></a>00127 <span class="preprocessor">        #region Wrapper methods</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span>        
<a name="l00143"></a><a class="code" href="class_z_bar_1_1_image.htm#a280592fd0a2ef8b378e52c8426440c0b">00143</a>         <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_z_bar_1_1_image.htm#a280592fd0a2ef8b378e52c8426440c0b" title="Dump raw image data to a file for debug.">Dump</a>(<span class="keywordtype">string</span> filebase){
<a name="l00144"></a>00144             <span class="keywordflow">if</span>(zbar_image_write(this.handle, filebase) != 0)
<a name="l00145"></a>00145                 <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_z_bar_1_1_z_bar_exception.htm" title="An exception that happened in ZBar.">ZBarException</a>(this.handle);
<a name="l00146"></a>00146         }
<a name="l00147"></a>00147         
<a name="l00151"></a><a class="code" href="class_z_bar_1_1_image.htm#a6a99dfc7a88918bdaefc378a7a2b3b91">00151</a>         <span class="keyword">public</span> uint <a class="code" href="class_z_bar_1_1_image.htm#a6a99dfc7a88918bdaefc378a7a2b3b91">Width</a>{
<a name="l00152"></a>00152             <span class="keyword">get</span>{
<a name="l00153"></a>00153                 <span class="keywordflow">return</span> zbar_image_get_width(this.handle);
<a name="l00154"></a>00154             }
<a name="l00155"></a>00155             <span class="keyword">set</span>{
<a name="l00156"></a>00156                 zbar_image_set_size(this.handle, value, this.<a class="code" href="class_z_bar_1_1_image.htm#a7bdee58a569a83064e59608258f44e29">Height</a>);
<a name="l00157"></a>00157             }
<a name="l00158"></a>00158         }
<a name="l00159"></a>00159         
<a name="l00163"></a><a class="code" href="class_z_bar_1_1_image.htm#a7bdee58a569a83064e59608258f44e29">00163</a>         <span class="keyword">public</span> uint <a class="code" href="class_z_bar_1_1_image.htm#a7bdee58a569a83064e59608258f44e29">Height</a>{
<a name="l00164"></a>00164             <span class="keyword">get</span>{
<a name="l00165"></a>00165                 <span class="keywordflow">return</span> zbar_image_get_height(this.handle);
<a name="l00166"></a>00166             }
<a name="l00167"></a>00167             <span class="keyword">set</span>{
<a name="l00168"></a>00168                 zbar_image_set_size(this.handle, this.<a class="code" href="class_z_bar_1_1_image.htm#a6a99dfc7a88918bdaefc378a7a2b3b91">Width</a>, value);
<a name="l00169"></a>00169             }
<a name="l00170"></a>00170         }
<a name="l00171"></a>00171         
<a name="l00181"></a><a class="code" href="class_z_bar_1_1_image.htm#a7b164d56358cf99d49bcf9e0fc6d76f9">00181</a>         <span class="keyword">public</span> uint <a class="code" href="class_z_bar_1_1_image.htm#a7b164d56358cf99d49bcf9e0fc6d76f9">Format</a>{
<a name="l00182"></a>00182             <span class="keyword">get</span>{
<a name="l00183"></a>00183                 <span class="keywordflow">return</span> zbar_image_get_format(this.handle);
<a name="l00184"></a>00184             }
<a name="l00185"></a>00185             <span class="keyword">set</span>{
<a name="l00186"></a>00186                 zbar_image_set_format(this.handle, value);
<a name="l00187"></a>00187             }
<a name="l00188"></a>00188         }
<a name="l00189"></a>00189         
<a name="l00193"></a><a class="code" href="class_z_bar_1_1_image.htm#a7649f218ad370acb8a1a4dce82f192ce">00193</a>         <span class="keyword">public</span> uint <a class="code" href="class_z_bar_1_1_image.htm#a7649f218ad370acb8a1a4dce82f192ce">SequenceNumber</a>{
<a name="l00194"></a>00194             <span class="keyword">get</span>{
<a name="l00195"></a>00195                 <span class="keywordflow">return</span> zbar_image_get_sequence(this.handle);
<a name="l00196"></a>00196             }
<a name="l00197"></a>00197             <span class="keyword">set</span>{
<a name="l00198"></a>00198                 zbar_image_set_sequence(this.handle, value);
<a name="l00199"></a>00199             }
<a name="l00200"></a>00200         }
<a name="l00201"></a>00201         
<a name="l00206"></a><a class="code" href="class_z_bar_1_1_image.htm#ac97bf8ffc8e26659b1109f7e2cbee942">00206</a>         <span class="keyword">public</span> byte[] <a class="code" href="class_z_bar_1_1_image.htm#ac97bf8ffc8e26659b1109f7e2cbee942">Data</a>{
<a name="l00207"></a>00207             <span class="keyword">get</span>{
<a name="l00208"></a>00208                 IntPtr pData = zbar_image_get_data(this.handle);
<a name="l00209"></a>00209                 <span class="keywordflow">if</span>(pData == IntPtr.Zero)
<a name="l00210"></a>00210                     <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Image data pointer is null!&quot;</span>);
<a name="l00211"></a>00211                 uint length = zbar_image_get_data_length(this.handle);
<a name="l00212"></a>00212                 byte[] data = <span class="keyword">new</span> byte[length];
<a name="l00213"></a>00213                 Marshal.Copy(pData, data, 0, (<span class="keywordtype">int</span>)length);
<a name="l00214"></a>00214                 <span class="keywordflow">return</span> data;
<a name="l00215"></a>00215             }
<a name="l00216"></a>00216             <span class="keyword">set</span>{
<a name="l00217"></a>00217                 IntPtr data = Marshal.AllocHGlobal(value.Length);
<a name="l00218"></a>00218                 Marshal.Copy(value, 0, data, value.Length);
<a name="l00219"></a>00219                 zbar_image_set_data(this.handle, data, (uint)value.Length, <a class="code" href="class_z_bar_1_1_image.htm" title="Representation of an image in ZBar.">Image</a>.CleanupHandler);
<a name="l00220"></a>00220             }
<a name="l00221"></a>00221         }
<a name="l00222"></a>00222         
<a name="l00226"></a>00226         <span class="keyword">private</span> <span class="keyword">static</span> zbar_image_cleanup_handler CleanupHandler = <span class="keyword">new</span> zbar_image_cleanup_handler(ReleaseAllocatedUnmanagedMemory);
<a name="l00227"></a>00227         
<a name="l00228"></a>00228         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">void</span> ReleaseAllocatedUnmanagedMemory(IntPtr image) {
<a name="l00229"></a>00229             IntPtr pData = zbar_image_get_data(image);
<a name="l00230"></a>00230             <span class="keywordflow">if</span>(pData != IntPtr.Zero)
<a name="l00231"></a>00231                 Marshal.FreeHGlobal(pData);
<a name="l00232"></a>00232         }
<a name="l00233"></a>00233         
<a name="l00237"></a><a class="code" href="class_z_bar_1_1_image.htm#a5017ffa8885113a013c44eb5f53558a6">00237</a>         <span class="keyword">public</span> IEnumerable&lt;Symbol&gt; <a class="code" href="class_z_bar_1_1_image.htm#a5017ffa8885113a013c44eb5f53558a6">Symbols</a>{
<a name="l00238"></a>00238             <span class="keyword">get</span>{
<a name="l00239"></a>00239                 IntPtr pSym = zbar_image_first_symbol(this.handle);
<a name="l00240"></a>00240                 <span class="keywordflow">while</span>(pSym != IntPtr.Zero){
<a name="l00241"></a>00241                     yield <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_z_bar_1_1_symbol.htm" title="Representation of a decoded symbol.">Symbol</a>(pSym);
<a name="l00242"></a>00242                     pSym = Symbol.zbar_symbol_next(pSym);
<a name="l00243"></a>00243                 }
<a name="l00244"></a>00244             }
<a name="l00245"></a>00245         }
<a name="l00246"></a>00246         
<a name="l00261"></a><a class="code" href="class_z_bar_1_1_image.htm#aab1bd58a160debe9004c681367a42e67">00261</a>         <span class="keyword">public</span> <a class="code" href="class_z_bar_1_1_image.htm" title="Representation of an image in ZBar.">Image</a> <a class="code" href="class_z_bar_1_1_image.htm#aab1bd58a160debe9004c681367a42e67" title="Image format conversion. refer to the documentation for supported image formats.">Convert</a>(uint format){
<a name="l00262"></a>00262             IntPtr img = zbar_image_convert(this.handle, format);
<a name="l00263"></a>00263             <span class="keywordflow">if</span>(img == IntPtr.Zero)
<a name="l00264"></a>00264                 <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Conversation failed!&quot;</span>);
<a name="l00265"></a>00265             <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_z_bar_1_1_image.htm#a14d5c7f23b42a92a0af3f4295c9f0bb6" title="Create/allocate a new uninitialized image.">Image</a>(img, <span class="keyword">false</span>);
<a name="l00266"></a>00266         }
<a name="l00267"></a>00267         
<a name="l00276"></a><a class="code" href="class_z_bar_1_1_image.htm#abf54f21f8750abd47e89571eb7abff81">00276</a>         <span class="keyword">public</span> <span class="keyword">static</span> uint <a class="code" href="class_z_bar_1_1_image.htm#abf54f21f8750abd47e89571eb7abff81" title="Get FourCC code from four chars.">FourCC</a>(<span class="keywordtype">char</span> c0, <span class="keywordtype">char</span> c1, <span class="keywordtype">char</span> c2, <span class="keywordtype">char</span> c3){
<a name="l00277"></a>00277             <span class="keywordflow">return</span> (uint)c0 | ((uint)c1) &lt;&lt; 8 | ((uint)c2) &lt;&lt; 16 | ((uint)c3) &lt;&lt; 24;
<a name="l00278"></a>00278         }
<a name="l00279"></a>00279         
<a name="l00280"></a>00280 <span class="preprocessor">        #endregion</span>
<a name="l00281"></a>00281 <span class="preprocessor"></span>        
<a name="l00282"></a>00282 <span class="preprocessor">        #region IDisposable Implementation</span>
<a name="l00283"></a>00283 <span class="preprocessor"></span>        <span class="comment">//This pattern for implementing IDisposable is recommended by:</span>
<a name="l00284"></a>00284         <span class="comment">//Framework Design Guidelines, 2. Edition, Section 9.4</span>
<a name="l00285"></a>00285         
<a name="l00297"></a><a class="code" href="class_z_bar_1_1_image.htm#afeae0da047404c3b32738d9794800923">00297</a>         <span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_z_bar_1_1_image.htm#afeae0da047404c3b32738d9794800923" title="Dispose this object.">Dispose</a>(<span class="keywordtype">bool</span> disposing){
<a name="l00298"></a>00298                 <span class="keywordflow">if</span> (this.handle != IntPtr.Zero) {
<a name="l00299"></a>00299                     zbar_image_destroy(this.handle);
<a name="l00300"></a>00300                     this.handle = IntPtr.Zero;
<a name="l00301"></a>00301                 }
<a name="l00302"></a>00302             <span class="keywordflow">if</span>(disposing){
<a name="l00303"></a>00303                 <span class="comment">//Release finalizable resources, at the moment none.</span>
<a name="l00304"></a>00304             }
<a name="l00305"></a>00305         }
<a name="l00306"></a>00306 
<a name="l00310"></a><a class="code" href="class_z_bar_1_1_image.htm#aeaaea9ce38c19d8180c486394a37c761">00310</a>         <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_z_bar_1_1_image.htm#aeaaea9ce38c19d8180c486394a37c761" title="Release resources held by this object.">Dispose</a>(){
<a name="l00311"></a>00311             <span class="comment">//We&#39;re disposing this object and can release objects that are finalizable</span>
<a name="l00312"></a>00312             this.<a class="code" href="class_z_bar_1_1_image.htm#aeaaea9ce38c19d8180c486394a37c761" title="Release resources held by this object.">Dispose</a>(<span class="keyword">true</span>);
<a name="l00313"></a>00313             GC.SuppressFinalize(<span class="keyword">this</span>);
<a name="l00314"></a>00314         }
<a name="l00315"></a>00315         
<a name="l00319"></a>00319         ~<a class="code" href="class_z_bar_1_1_image.htm" title="Representation of an image in ZBar.">Image</a>(){
<a name="l00320"></a>00320             <span class="comment">//Dispose this object, but do NOT release finalizable objects, we don&#39;t know in which order</span>
<a name="l00321"></a>00321             <span class="comment">//these are release and they may already be finalized.</span>
<a name="l00322"></a>00322             this.<a class="code" href="class_z_bar_1_1_image.htm#aeaaea9ce38c19d8180c486394a37c761" title="Release resources held by this object.">Dispose</a>(<span class="keyword">false</span>);
<a name="l00323"></a>00323         }
<a name="l00324"></a>00324 <span class="preprocessor">        #endregion</span>
<a name="l00325"></a>00325 <span class="preprocessor"></span>        
<a name="l00326"></a>00326 <span class="preprocessor">        #region Extern C functions</span>
<a name="l00327"></a>00327 <span class="preprocessor"></span>
<a name="l00328"></a>00328 
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 
<a name="l00334"></a>00334         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00335"></a>00335         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr zbar_image_create();
<a name="l00336"></a>00336         
<a name="l00347"></a>00347         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00348"></a>00348         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_destroy(IntPtr image);
<a name="l00349"></a>00349         
<a name="l00356"></a>00356         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00357"></a>00357         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_ref(IntPtr image, <span class="keywordtype">int</span> refs);
<a name="l00358"></a>00358         
<a name="l00369"></a>00369         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00370"></a>00370         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr zbar_image_convert(IntPtr image, uint format);
<a name="l00371"></a>00371         
<a name="l00382"></a>00382         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00383"></a>00383         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr zbar_image_convert_resize(IntPtr image, uint format, uint width, uint height);
<a name="l00384"></a>00384         
<a name="l00388"></a>00388         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00389"></a>00389         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> uint zbar_image_get_format(IntPtr image);
<a name="l00390"></a>00390         
<a name="l00393"></a>00393         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00394"></a>00394         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> uint zbar_image_get_sequence(IntPtr image);
<a name="l00395"></a>00395         
<a name="l00399"></a>00399         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00400"></a>00400         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> uint zbar_image_get_width(IntPtr image);
<a name="l00401"></a>00401         
<a name="l00405"></a>00405         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00406"></a>00406         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> uint zbar_image_get_height(IntPtr image);
<a name="l00407"></a>00407         
<a name="l00411"></a>00411         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00412"></a>00412         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr zbar_image_get_data(IntPtr image);
<a name="l00413"></a>00413         
<a name="l00416"></a>00416         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00417"></a>00417         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> uint zbar_image_get_data_length(IntPtr img);
<a name="l00418"></a>00418         
<a name="l00424"></a>00424         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00425"></a>00425         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr zbar_image_first_symbol(IntPtr image);
<a name="l00426"></a>00426         
<a name="l00433"></a>00433         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00434"></a>00434         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_set_format(IntPtr image, uint format);
<a name="l00435"></a>00435         
<a name="l00438"></a>00438         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00439"></a>00439         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_set_sequence(IntPtr image, uint sequence_num);
<a name="l00440"></a>00440         
<a name="l00444"></a>00444         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00445"></a>00445         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_set_size(IntPtr image, uint width, uint height);
<a name="l00446"></a>00446         
<a name="l00450"></a>00450         <span class="keyword">private</span> delegate <span class="keywordtype">void</span> zbar_image_cleanup_handler(IntPtr image);
<a name="l00451"></a>00451                 
<a name="l00457"></a>00457         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00458"></a>00458         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_set_data(IntPtr image, IntPtr data, uint data_byte_length, zbar_image_cleanup_handler cleanup_handler);
<a name="l00459"></a>00459         
<a name="l00463"></a>00463         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00464"></a>00464         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_free_data(IntPtr image);
<a name="l00465"></a>00465         
<a name="l00468"></a>00468         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00469"></a>00469         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_set_userdata(IntPtr image, IntPtr userdata);
<a name="l00470"></a>00470         
<a name="l00473"></a>00473         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00474"></a>00474         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr zbar_image_get_userdata(IntPtr image);
<a name="l00475"></a>00475         
<a name="l00501"></a>00501         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00502"></a>00502         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">int</span> zbar_image_write(IntPtr image, <span class="keywordtype">string</span> filebase);
<a name="l00503"></a>00503         
<a name="l00506"></a>00506         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00507"></a>00507         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr zbar_image_read(<span class="keywordtype">string</span> filename);
<a name="l00508"></a>00508 <span class="preprocessor">        #endregion</span>
<a name="l00509"></a>00509 <span class="preprocessor"></span>    }
<a name="l00510"></a>00510 }
</pre></div></div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Fri Mar 18 2011 19:02:28 for zbar-sharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
