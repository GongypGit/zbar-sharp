<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>zbar-sharp: libzbar-cil/ImageScanner.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Packages</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>libzbar-cil/ImageScanner.cs</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment"> *  Copyright 2009 (c) Jonas Finnemann Jensen &lt;jopsen@gmail.com&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> *  Copyright 2007-2009 (c) Jeff Brown &lt;spadix@users.sourceforge.net&gt;</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> *  This file is part of the ZBar CIL Wrapper.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> *  The ZBar CIL Wrapper is free software; you can redistribute it</span>
<a name="l00008"></a>00008 <span class="comment"> *  and/or modify it under the terms of the GNU Lesser Public License as</span>
<a name="l00009"></a>00009 <span class="comment"> *  published by the Free Software Foundation; either version 2.1 of</span>
<a name="l00010"></a>00010 <span class="comment"> *  the License, or (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> *  The ZBar CIL Wrapper is distributed in the hope that it will be</span>
<a name="l00013"></a>00013 <span class="comment"> *  useful, but WITHOUT ANY WARRANTY; without even the implied warranty</span>
<a name="l00014"></a>00014 <span class="comment"> *  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment"> *  GNU Lesser Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> *  You should have received a copy of the GNU Lesser Public License</span>
<a name="l00018"></a>00018 <span class="comment"> *  along with the ZBar CIL Wrapper; if not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> *  Software Foundation, Inc., 51 Franklin St, Fifth Floor,</span>
<a name="l00020"></a>00020 <span class="comment"> *  Boston, MA  02110-1301  USA</span>
<a name="l00021"></a>00021 <span class="comment"> * </span>
<a name="l00022"></a>00022 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="keyword">using</span> System;
<a name="l00025"></a>00025 <span class="keyword">using</span> System.Runtime.InteropServices;
<a name="l00026"></a>00026 <span class="keyword">using</span> System.Collections.Generic;
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="keyword">namespace </span>ZBar
<a name="l00029"></a>00029 {
<a name="l00033"></a><a class="code" href="class_z_bar_1_1_image_scanner.htm">00033</a>     <span class="keyword">public</span> <span class="keyword">class </span><a class="code" href="class_z_bar_1_1_image_scanner.htm" title="Mid-level image scanner interface. reads barcodes from 2-D images.">ImageScanner</a> : IDisposable
<a name="l00034"></a>00034     {
<a name="l00035"></a>00035         <span class="keyword">private</span> IntPtr handle = IntPtr.Zero;
<a name="l00036"></a>00036         <span class="keyword">private</span> <span class="keywordtype">bool</span> cache = <span class="keyword">false</span>;
<a name="l00037"></a>00037         
<a name="l00041"></a><a class="code" href="class_z_bar_1_1_image_scanner.htm#a4e6632b52eb4e5b05b611c073fdc4c4e">00041</a>         <span class="keyword">public</span> <a class="code" href="class_z_bar_1_1_image_scanner.htm#a4e6632b52eb4e5b05b611c073fdc4c4e" title="Create a new ImageScanner.">ImageScanner</a>(){
<a name="l00042"></a>00042             this.handle = zbar_image_scanner_create();
<a name="l00043"></a>00043             <span class="keywordflow">if</span>(this.handle == IntPtr.Zero)
<a name="l00044"></a>00044                 <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Failed to create an underlying image_scanner!&quot;</span>);
<a name="l00045"></a>00045         }
<a name="l00046"></a>00046         
<a name="l00047"></a>00047 <span class="preprocessor">        #region Wrapper methods</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>        
<a name="l00062"></a><a class="code" href="class_z_bar_1_1_image_scanner.htm#a2b0458972bfcd2227946a3b909e03fe2">00062</a>         <span class="keyword">public</span> <span class="keywordtype">int</span> <a class="code" href="class_z_bar_1_1_image_scanner.htm#a2b0458972bfcd2227946a3b909e03fe2" title="Scan an image for symbols.">Scan</a>(<a class="code" href="class_z_bar_1_1_image.htm" title="Representation of an image in ZBar.">Image</a> image){
<a name="l00063"></a>00063             <span class="keywordtype">int</span> count = zbar_scan_image(this.handle, image.Handle);
<a name="l00064"></a>00064             <span class="keywordflow">if</span>(count &lt; 0)
<a name="l00065"></a>00065                 <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Image scanning failed!&quot;</span>);
<a name="l00066"></a>00066             <span class="keywordflow">return</span> count;
<a name="l00067"></a>00067         }
<a name="l00068"></a>00068         
<a name="l00083"></a><a class="code" href="class_z_bar_1_1_image_scanner.htm#aedbaa94b84f0b3d01cf0d0d0609c1910">00083</a>         <span class="keyword">public</span> List&lt;Symbol&gt; <a class="code" href="class_z_bar_1_1_image_scanner.htm#aedbaa94b84f0b3d01cf0d0d0609c1910" title="Scan an image for symbols.">Scan</a>(System.Drawing.Image image){
<a name="l00084"></a>00084             <span class="keyword">using</span>(<a class="code" href="class_z_bar_1_1_image.htm" title="Representation of an image in ZBar.">Image</a> zimg = <span class="keyword">new</span> <a class="code" href="class_z_bar_1_1_image.htm" title="Representation of an image in ZBar.">Image</a>(image)){
<a name="l00085"></a>00085                 <span class="keyword">using</span>(<a class="code" href="class_z_bar_1_1_image.htm" title="Representation of an image in ZBar.">Image</a> grey = zimg.<a class="code" href="class_z_bar_1_1_image.htm#aab1bd58a160debe9004c681367a42e67" title="Image format conversion. refer to the documentation for supported image formats.">Convert</a>(<a class="code" href="class_z_bar_1_1_image.htm" title="Representation of an image in ZBar.">Image</a>.FourCC(<span class="charliteral">&#39;Y&#39;</span>, <span class="charliteral">&#39;8&#39;</span>, <span class="charliteral">&#39;0&#39;</span>, <span class="charliteral">&#39;0&#39;</span>))){
<a name="l00086"></a>00086                     this.<a class="code" href="class_z_bar_1_1_image_scanner.htm#a2b0458972bfcd2227946a3b909e03fe2" title="Scan an image for symbols.">Scan</a>(grey);
<a name="l00087"></a>00087                     <span class="keywordflow">return</span> <span class="keyword">new</span> List&lt;Symbol&gt;(grey.<a class="code" href="class_z_bar_1_1_image.htm#a5017ffa8885113a013c44eb5f53558a6">Symbols</a>);
<a name="l00088"></a>00088                 }
<a name="l00089"></a>00089             }
<a name="l00090"></a>00090         }
<a name="l00091"></a>00091         
<a name="l00100"></a><a class="code" href="class_z_bar_1_1_image_scanner.htm#adbbd840b5fc111e3646116fe73697dfc">00100</a>         <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="class_z_bar_1_1_image_scanner.htm#adbbd840b5fc111e3646116fe73697dfc">Cache</a>{
<a name="l00101"></a>00101             <span class="keyword">get</span>{
<a name="l00102"></a>00102                 <span class="keywordflow">return</span> this.cache;
<a name="l00103"></a>00103             }
<a name="l00104"></a>00104             <span class="keyword">set</span>{
<a name="l00105"></a>00105                 zbar_image_scanner_enable_cache(this.handle, value ? 1 : 0);
<a name="l00106"></a>00106                 this.cache = value;
<a name="l00107"></a>00107             }
<a name="l00108"></a>00108         }
<a name="l00109"></a>00109         
<a name="l00113"></a><a class="code" href="class_z_bar_1_1_image_scanner.htm#a5115afe229872c532c55ea56fc196135">00113</a>         <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_z_bar_1_1_image_scanner.htm#a5115afe229872c532c55ea56fc196135" title="Set config for indicated symbology (0 for all) to specified value.">SetConfiguration</a>(<a class="code" href="namespace_z_bar.htm#aa39741840f097b4aabe981774b7ce5a4" title="Different symbol types.">SymbolType</a> symbology, <a class="code" href="namespace_z_bar.htm#a37b60f4f8f0c94087750fc9f5f8b6ccf" title="Configuration parameters for the image scanner.">Config</a> config, <span class="keywordtype">int</span> value){
<a name="l00114"></a>00114             <span class="keywordflow">if</span>(zbar_image_scanner_set_config(this.handle, (<span class="keywordtype">int</span>)symbology, (<span class="keywordtype">int</span>)config, value) != 0)
<a name="l00115"></a>00115                 <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Failed to set configuration&quot;</span>);
<a name="l00116"></a>00116         }
<a name="l00117"></a>00117         
<a name="l00118"></a>00118 <span class="preprocessor">        #endregion</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span>        
<a name="l00120"></a>00120 <span class="preprocessor">        #region IDisposable Implementation</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span>        <span class="comment">//This pattern for implementing IDisposable is recommended by:</span>
<a name="l00122"></a>00122         <span class="comment">//Framework Design Guidelines, 2. Edition, Section 9.4</span>
<a name="l00123"></a>00123         
<a name="l00135"></a><a class="code" href="class_z_bar_1_1_image_scanner.htm#af9251a4899867c9a5bfb100f16aae0d6">00135</a>         <span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_z_bar_1_1_image_scanner.htm#af9251a4899867c9a5bfb100f16aae0d6" title="Dispose this object.">Dispose</a>(<span class="keywordtype">bool</span> disposing){
<a name="l00136"></a>00136             <span class="keywordflow">if</span>(this.handle != IntPtr.Zero){
<a name="l00137"></a>00137                 zbar_image_scanner_destroy(this.handle);
<a name="l00138"></a>00138                 this.handle = IntPtr.Zero;
<a name="l00139"></a>00139             }
<a name="l00140"></a>00140             <span class="keywordflow">if</span>(disposing){
<a name="l00141"></a>00141                 <span class="comment">//Release finalizable resources, at the moment none.</span>
<a name="l00142"></a>00142             }
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144         
<a name="l00148"></a><a class="code" href="class_z_bar_1_1_image_scanner.htm#ad60a8e53a0cf6a11b16bcc84067b0457">00148</a>         <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_z_bar_1_1_image_scanner.htm#ad60a8e53a0cf6a11b16bcc84067b0457" title="Release resources held by this object.">Dispose</a>(){
<a name="l00149"></a>00149             <span class="comment">//We&#39;re disposing this object and can release objects that are finalizable</span>
<a name="l00150"></a>00150             this.<a class="code" href="class_z_bar_1_1_image_scanner.htm#ad60a8e53a0cf6a11b16bcc84067b0457" title="Release resources held by this object.">Dispose</a>(<span class="keyword">true</span>);
<a name="l00151"></a>00151             GC.SuppressFinalize(<span class="keyword">this</span>);
<a name="l00152"></a>00152         }
<a name="l00153"></a>00153         
<a name="l00157"></a>00157         ~<a class="code" href="class_z_bar_1_1_image_scanner.htm" title="Mid-level image scanner interface. reads barcodes from 2-D images.">ImageScanner</a>(){
<a name="l00158"></a>00158             <span class="comment">//Dispose this object, but do NOT release finalizable objects, we don&#39;t know in which order</span>
<a name="l00159"></a>00159             <span class="comment">//these are release and they may already be finalized.</span>
<a name="l00160"></a>00160             this.<a class="code" href="class_z_bar_1_1_image_scanner.htm#ad60a8e53a0cf6a11b16bcc84067b0457" title="Release resources held by this object.">Dispose</a>(<span class="keyword">false</span>);
<a name="l00161"></a>00161         }
<a name="l00162"></a>00162 <span class="preprocessor">        #endregion</span>
<a name="l00163"></a>00163 <span class="preprocessor"></span>        
<a name="l00164"></a>00164 <span class="preprocessor">        #region Extern C functions</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span>
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 
<a name="l00168"></a>00168         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00169"></a>00169         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr zbar_image_scanner_create();
<a name="l00170"></a>00170         
<a name="l00174"></a>00174         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00175"></a>00175         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_scanner_destroy(IntPtr scanner);
<a name="l00176"></a>00176         
<a name="l00180"></a>00180         <span class="keyword">private</span> delegate <span class="keywordtype">void</span> zbar_image_data_handler(IntPtr image, IntPtr userdata);
<a name="l00181"></a>00181         
<a name="l00189"></a>00189         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00190"></a>00190         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> zbar_image_data_handler zbar_image_scanner_set_data_handler(IntPtr scanner, zbar_image_data_handler handler, IntPtr userdata);
<a name="l00191"></a>00191         
<a name="l00192"></a>00192         
<a name="l00199"></a>00199         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00200"></a>00200         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">int</span> zbar_image_scanner_set_config(IntPtr scanner, <span class="keywordtype">int</span> symbology, <span class="keywordtype">int</span> config, <span class="keywordtype">int</span> val);
<a name="l00201"></a>00201         
<a name="l00209"></a>00209         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00210"></a>00210         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">void</span> zbar_image_scanner_enable_cache(IntPtr scanner, <span class="keywordtype">int</span> enable);
<a name="l00211"></a>00211         
<a name="l00220"></a>00220         [DllImport(<span class="stringliteral">&quot;libzbar&quot;</span>)]
<a name="l00221"></a>00221         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keywordtype">int</span> zbar_scan_image(IntPtr scanner, IntPtr image);
<a name="l00222"></a>00222 <span class="preprocessor">        #endregion</span>
<a name="l00223"></a>00223 <span class="preprocessor"></span>    }
<a name="l00224"></a>00224     
<a name="l00228"></a><a class="code" href="namespace_z_bar.htm#a37b60f4f8f0c94087750fc9f5f8b6ccf">00228</a>     <span class="keyword">public</span> <span class="keyword">enum</span> <a class="code" href="namespace_z_bar.htm#a37b60f4f8f0c94087750fc9f5f8b6ccf" title="Configuration parameters for the image scanner.">Config</a>{
<a name="l00232"></a>00232         Enable          = 0,
<a name="l00233"></a>00233         
<a name="l00237"></a>00237         AddCheck,
<a name="l00238"></a>00238         
<a name="l00242"></a>00242         EmitCheck,
<a name="l00243"></a>00243         
<a name="l00247"></a>00247         ASCII,
<a name="l00248"></a>00248         
<a name="l00252"></a>00252         Num,
<a name="l00253"></a>00253         
<a name="l00257"></a>00257         MinimumLength   = 0x20,
<a name="l00258"></a>00258         
<a name="l00262"></a>00262         MaximumLength,
<a name="l00263"></a>00263         
<a name="l00267"></a>00267         Position        = 0x80,
<a name="l00268"></a>00268         
<a name="l00272"></a>00272         XDensity        = 0x100,
<a name="l00273"></a>00273         
<a name="l00277"></a>00277         YDensity
<a name="l00278"></a>00278     }
<a name="l00279"></a>00279     
<a name="l00280"></a>00280 }
</pre></div></div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Sat Mar 19 2011 17:44:19 for zbar-sharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
