<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>zbar-sharp: gtkzbar-cil/Scanner.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Packages</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>gtkzbar-cil/Scanner.cs</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="keyword">using</span> ZBar;
<a name="l00002"></a>00002 <span class="keyword">using</span> System;
<a name="l00003"></a>00003 <span class="keyword">using</span> Gtk;
<a name="l00004"></a>00004 <span class="keyword">using</span> Gdk;
<a name="l00005"></a>00005 <span class="keyword">using</span> System.Threading;
<a name="l00006"></a>00006 <span class="keyword">using</span> System.Media;
<a name="l00007"></a>00007 <span class="keyword">using</span> System.Collections.Generic;
<a name="l00008"></a>00008 <span class="keyword">using</span> System.IO;
<a name="l00009"></a>00009 <span class="keyword">using</span> System.Diagnostics;
<a name="l00010"></a>00010 
<a name="l00014"></a>00014 <span class="keyword">namespace </span>GtkZBar
<a name="l00015"></a>00015 {
<a name="l00022"></a>00022     [System.ComponentModel.ToolboxItem(<span class="keyword">true</span>)]
<a name="l00023"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm">00023</a>     <span class="keyword">public</span> <span class="keyword">class </span><a class="code" href="class_gtk_z_bar_1_1_scanner.htm" title="Bar code scanner widget.">Scanner</a> : Gtk.DrawingArea
<a name="l00024"></a>00024     {   
<a name="l00025"></a>00025         <span class="keyword">public</span> <a class="code" href="class_gtk_z_bar_1_1_scanner.htm" title="Bar code scanner widget.">Scanner</a>(){
<a name="l00026"></a>00026             this.Destroyed += HandleDestroyed; 
<a name="l00027"></a>00027         }
<a name="l00028"></a>00028 
<a name="l00029"></a>00029         <span class="keywordtype">void</span> HandleDestroyed(<span class="keywordtype">object</span> sender, EventArgs e){
<a name="l00030"></a>00030             <span class="comment">//Make sure we&#39;re closed</span>
<a name="l00031"></a>00031             <span class="keywordflow">if</span>(this.worker != null){
<a name="l00032"></a>00032                 <span class="comment">//Don&#39;t call close, it&#39;ll force a redraw</span>
<a name="l00033"></a>00033                 this.worker.Abort();
<a name="l00034"></a>00034                 this.worker.Join();
<a name="l00035"></a>00035             }
<a name="l00036"></a>00036             this.worker = null;
<a name="l00037"></a>00037             
<a name="l00038"></a>00038             <span class="comment">//Release static image resources</span>
<a name="l00039"></a>00039             <span class="keywordflow">if</span>(this.overlay != null)
<a name="l00040"></a>00040                 this.overlay.Dispose();
<a name="l00041"></a>00041             this.overlay = null;
<a name="l00042"></a>00042             <span class="keywordflow">if</span>(this.sourceMissing != null)
<a name="l00043"></a>00043                 this.sourceMissing.Dispose();
<a name="l00044"></a>00044             this.sourceMissing = null;
<a name="l00045"></a>00045         }
<a name="l00046"></a>00046         
<a name="l00050"></a>00050         <span class="keyword">private</span> <span class="keywordtype">string</span> currentDevice = null;
<a name="l00051"></a>00051         
<a name="l00058"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm#acb16b99d38e3f2110c0a9fd86fdbb75d">00058</a>         <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_gtk_z_bar_1_1_scanner.htm#acb16b99d38e3f2110c0a9fd86fdbb75d" title="Open a video device.">Open</a>(<span class="keywordtype">string</span> device){
<a name="l00059"></a>00059             <span class="keywordflow">if</span>(this.worker != null)
<a name="l00060"></a>00060                 this.worker.Abort();
<a name="l00061"></a>00061             this.worker = <span class="keyword">new</span> Thread(this.ProcessVideo);
<a name="l00062"></a>00062             this.currentDevice = device;
<a name="l00063"></a>00063             this.worker.Start();
<a name="l00064"></a>00064         }
<a name="l00065"></a>00065         
<a name="l00066"></a>00066         <span class="keyword">public</span> <span class="keywordtype">void</span> Close(){
<a name="l00067"></a>00067             <span class="keywordflow">if</span>(this.worker != null){
<a name="l00068"></a>00068                 this.worker.Abort();
<a name="l00069"></a>00069                 this.worker.Join();
<a name="l00070"></a>00070                 lock(this.drawLock){
<a name="l00071"></a>00071                     this.toDraw = null;
<a name="l00072"></a>00072                     this.symbols = null;
<a name="l00073"></a>00073                 }
<a name="l00074"></a>00074                 this.QueueDraw();
<a name="l00075"></a>00075             }
<a name="l00076"></a>00076             this.worker = null;
<a name="l00077"></a>00077             this.currentDevice = null;
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079 
<a name="l00083"></a>00083         <span class="keyword">private</span> System.Threading.Thread worker = null;
<a name="l00084"></a>00084         
<a name="l00088"></a>00088         <span class="keyword">private</span> System.Object drawLock = <span class="keyword">new</span> System.Object();
<a name="l00089"></a>00089         
<a name="l00094"></a>00094         <span class="keyword">private</span> byte[] toDraw = null;
<a name="l00095"></a>00095         
<a name="l00100"></a>00100         <span class="keyword">private</span> <span class="keywordtype">int</span> toDrawWidth;
<a name="l00101"></a>00101         
<a name="l00106"></a>00106         <span class="keyword">private</span> <span class="keywordtype">int</span> toDrawHeight;
<a name="l00107"></a>00107         
<a name="l00112"></a>00112         <span class="keyword">private</span> List&lt;Symbol&gt; symbols = null;
<a name="l00113"></a>00113         
<a name="l00117"></a>00117         <span class="keyword">private</span> <span class="keywordtype">void</span> ProcessVideo(){
<a name="l00118"></a>00118             <span class="keyword">using</span>(<a class="code" href="class_z_bar_1_1_video.htm" title="Mid-level video source abstraction. captures images from a video device.">Video</a> video = <span class="keyword">new</span> <a class="code" href="class_z_bar_1_1_video.htm" title="Mid-level video source abstraction. captures images from a video device.">Video</a>()){
<a name="l00119"></a>00119                 <span class="keywordflow">try</span>{
<a name="l00120"></a>00120                     video.<a class="code" href="class_z_bar_1_1_video.htm#a6e41c56d6c9f61d4735ea64eec78504d" title="Open and probe a video device.">Open</a>(this.currentDevice);
<a name="l00121"></a>00121                     video.<a class="code" href="class_z_bar_1_1_video.htm#a52ce3f264c09a6cf5047a94f8276e392">Enabled</a> = <span class="keyword">true</span>;
<a name="l00122"></a>00122                     <span class="keyword">using</span>(<a class="code" href="class_z_bar_1_1_image_scanner.htm" title="Mid-level image scanner interface. reads barcodes from 2-D images.">ImageScanner</a> scanner = <span class="keyword">new</span> <a class="code" href="class_z_bar_1_1_image_scanner.htm" title="Mid-level image scanner interface. reads barcodes from 2-D images.">ImageScanner</a>()){
<a name="l00123"></a>00123                         scanner.<a class="code" href="class_z_bar_1_1_image_scanner.htm#adbbd840b5fc111e3646116fe73697dfc">Cache</a> = <span class="keyword">true</span>;
<a name="l00124"></a>00124                         this.CaptureVideo(video, scanner);
<a name="l00125"></a>00125                     }
<a name="l00126"></a>00126                     video.<a class="code" href="class_z_bar_1_1_video.htm#a52ce3f264c09a6cf5047a94f8276e392">Enabled</a> = <span class="keyword">false</span>;
<a name="l00127"></a>00127                 }
<a name="l00128"></a>00128                 <span class="keywordflow">catch</span>(<a class="code" href="class_z_bar_1_1_z_bar_exception.htm" title="An exception that happened in ZBar.">ZBarException</a> ex){
<a name="l00129"></a>00129                     lock(this.drawLock){
<a name="l00130"></a>00130                         this.toDraw = null;
<a name="l00131"></a>00131                         this.symbols = null;
<a name="l00132"></a>00132                     }
<a name="l00133"></a>00133                     GLib.IdleHandler hdl = delegate(){
<a name="l00134"></a>00134                         <span class="keywordflow">if</span>(this.<a class="code" href="class_gtk_z_bar_1_1_scanner.htm#ac7e6abee28e2884d3805627a7ef44ce4" title="Occurs if an error occured during runtime and the video device stopped.">Stopped</a> != null)
<a name="l00135"></a>00135                             this.<a class="code" href="class_gtk_z_bar_1_1_scanner.htm#ac7e6abee28e2884d3805627a7ef44ce4" title="Occurs if an error occured during runtime and the video device stopped.">Stopped</a>(<span class="keyword">this</span>, <span class="keyword">new</span> EventArgs());
<a name="l00136"></a>00136                         <span class="keywordflow">if</span>(this.<a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a730ad86886d962afd0b398d07cc5a6aa" title="Occurs if an error happens and user should be informed about this.">Error</a> != null)
<a name="l00137"></a>00137                             this.<a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a730ad86886d962afd0b398d07cc5a6aa" title="Occurs if an error happens and user should be informed about this.">Error</a>(<span class="keyword">this</span>, <span class="keyword">new</span> ErrorEventArgs(ex.<a class="code" href="class_z_bar_1_1_z_bar_exception.htm#ad9824893c41165f1e0557dc152261e6f">Message</a>, ex));
<a name="l00138"></a>00138                         this.QueueDraw();
<a name="l00139"></a>00139                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00140"></a>00140                     };
<a name="l00141"></a>00141                     GLib.Idle.Add(hdl);
<a name="l00142"></a>00142                 }
<a name="l00143"></a>00143             }
<a name="l00144"></a>00144         }
<a name="l00145"></a>00145         
<a name="l00152"></a>00152         <span class="keyword">private</span> <span class="keywordtype">void</span> CaptureVideo(<a class="code" href="class_z_bar_1_1_video.htm" title="Mid-level video source abstraction. captures images from a video device.">Video</a> video, <a class="code" href="class_z_bar_1_1_image_scanner.htm" title="Mid-level image scanner interface. reads barcodes from 2-D images.">ImageScanner</a> scanner){
<a name="l00153"></a>00153             <span class="keywordflow">while</span>(<span class="keyword">true</span>){
<a name="l00154"></a>00154                 <span class="keyword">using</span>(ZBar.Image frame = video.<a class="code" href="class_z_bar_1_1_video.htm#a215be28517bfada9a211fc24932db784" title="Retrieve next captured image.">NextFrame</a>()){
<a name="l00155"></a>00155                     <span class="keyword">using</span>(ZBar.Image bwImg = frame.Convert(0x30303859)){
<a name="l00156"></a>00156                         <span class="comment">//Scan the image for bar codes</span>
<a name="l00157"></a>00157                         scanner.<a class="code" href="class_z_bar_1_1_image_scanner.htm#a2b0458972bfcd2227946a3b909e03fe2" title="Scan an image for symbols.">Scan</a>(bwImg);
<a name="l00158"></a>00158                         <span class="comment">//Get the data, width, height and symboles for the image</span>
<a name="l00159"></a>00159                         byte[] data = bwImg.Data;
<a name="l00160"></a>00160                         <span class="keywordtype">int</span> w = (int)bwImg.Width;
<a name="l00161"></a>00161                         <span class="keywordtype">int</span> h = (<span class="keywordtype">int</span>)bwImg.Height;
<a name="l00162"></a>00162                         var symbols = <span class="keyword">new</span> List&lt;Symbol&gt; (bwImg.Symbols);
<a name="l00163"></a>00163                         
<a name="l00164"></a>00164                         <span class="comment">// Resize</span>
<a name="l00165"></a>00165                         <span class="comment">// number of pixels to shift in the original image</span>
<a name="l00166"></a>00166                         <span class="keywordtype">double</span> stepX = (double)w / AllocatedWidth;
<a name="l00167"></a>00167                         <span class="keywordtype">double</span> stepY = (double)h / AllocatedHeight;
<a name="l00168"></a>00168                         
<a name="l00169"></a>00169                         <span class="comment">// don&#39;t do enlarging</span>
<a name="l00170"></a>00170                         <span class="keywordflow">if</span> (stepX &lt;= 1 &amp;&amp; stepY &lt;= 1)
<a name="l00171"></a>00171                             <span class="keywordflow">return</span>;
<a name="l00172"></a>00172                         
<a name="l00173"></a>00173                         <span class="keywordtype">double</span> smallestStep = Math.Max (stepX, stepY);
<a name="l00174"></a>00174                         stepX = stepY = smallestStep;
<a name="l00175"></a>00175                         
<a name="l00176"></a>00176                         <span class="keywordtype">int</span> maxHeight = (int)((<span class="keywordtype">double</span>)h / smallestStep);
<a name="l00177"></a>00177                         <span class="keywordtype">int</span> maxWidth = (int)((<span class="keywordtype">double</span>)w / smallestStep);
<a name="l00178"></a>00178                         
<a name="l00179"></a>00179                         <span class="keywordtype">int</span> newPixels = maxWidth * maxHeight;
<a name="l00180"></a>00180                         byte[] resizedFrame = <span class="keyword">new</span> byte[newPixels];
<a name="l00181"></a>00181                         
<a name="l00182"></a>00182                         <span class="keywordtype">double</span> sX = 0, sY = 0;
<a name="l00183"></a>00183                         <span class="keywordtype">int</span> i;
<a name="l00184"></a>00184                         
<a name="l00185"></a>00185                         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; newPixels; j++) {
<a name="l00186"></a>00186                             i = (int)sX + (<span class="keywordtype">int</span>)((int)sY * w);
<a name="l00187"></a>00187                             
<a name="l00188"></a>00188                             <span class="comment">// stop exceptions</span>
<a name="l00189"></a>00189                             <span class="keywordflow">if</span> (i &gt;= data.Length) {
<a name="l00190"></a>00190                                 Console.WriteLine (<span class="stringliteral">&quot;Trying to access {0} on the old frame, up to {1} on new frame&quot;</span>, i, j);
<a name="l00191"></a>00191                                 <span class="keywordflow">break</span>;
<a name="l00192"></a>00192                             }
<a name="l00193"></a>00193                             
<a name="l00194"></a>00194                             resizedFrame[j] = data[i];
<a name="l00195"></a>00195                             
<a name="l00196"></a>00196                             sX += stepX;
<a name="l00197"></a>00197                             
<a name="l00198"></a>00198                             <span class="keywordflow">if</span> ((j + 1) % maxWidth == 0) {
<a name="l00199"></a>00199                                 sY += stepY;
<a name="l00200"></a>00200                                 sX = 0;
<a name="l00201"></a>00201                             }
<a name="l00202"></a>00202                         }
<a name="l00203"></a>00203                         
<a name="l00204"></a>00204                         w = maxWidth;
<a name="l00205"></a>00205                         h = maxHeight;
<a name="l00206"></a>00206                         data = resizedFrame;
<a name="l00207"></a>00207                         
<a name="l00208"></a>00208                         <span class="comment">//Flip the image vertically, if needed</span>
<a name="l00209"></a>00209                         <span class="keywordflow">if</span>(this.<a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a2581dc5d6b4482fbc6797b2e890700bd">Flip</a>){
<a name="l00210"></a>00210                             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ih = 0; ih &lt; h; ih++){
<a name="l00211"></a>00211                                 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> iw = 0; iw &lt; w / 2; iw++){
<a name="l00212"></a>00212                                     <span class="comment">//TODO: The offsets below could be computed more efficiently, but I don&#39;t care this happens on a thread... :)</span>
<a name="l00213"></a>00213                                     <span class="keywordtype">int</span> p1 = w * ih + iw;
<a name="l00214"></a>00214                                     <span class="keywordtype">int</span> p2 = w * ih + (w - iw- 1);
<a name="l00215"></a>00215                                     <span class="comment">//Swap bytes:</span>
<a name="l00216"></a>00216                                     byte b1 = data[p1];
<a name="l00217"></a>00217                                     data[p1] = data[p2];
<a name="l00218"></a>00218                                     data[p2] = b1;
<a name="l00219"></a>00219                                 }
<a name="l00220"></a>00220                             }
<a name="l00221"></a>00221                         }
<a name="l00222"></a>00222                         <span class="keywordflow">if</span> (<a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a5b485c09e6a6fb18528baea27d00bda4">Rotate</a>) {
<a name="l00223"></a>00223                             <span class="keywordtype">int</span> l = data.Length - 1;
<a name="l00224"></a>00224                             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> p = 0; p &lt; data.Length / 2; p++) {
<a name="l00225"></a>00225                                 <span class="comment">//Swap bytes:</span>
<a name="l00226"></a>00226                                 var j = l - p;
<a name="l00227"></a>00227                                 byte b1 = data[j];
<a name="l00228"></a>00228                                 data[j] = data[p];
<a name="l00229"></a>00229                                 data[p] = b1;
<a name="l00230"></a>00230                             }
<a name="l00231"></a>00231                         }
<a name="l00232"></a>00232                         <span class="comment">//Lock the drawing process and pass it the data we aquired</span>
<a name="l00233"></a>00233                         lock(this.drawLock){
<a name="l00234"></a>00234                             this.toDraw = data;
<a name="l00235"></a>00235                             this.toDrawWidth = w;
<a name="l00236"></a>00236                             this.toDrawHeight = h;
<a name="l00237"></a>00237                             this.symbols = symbols;
<a name="l00238"></a>00238                         }
<a name="l00239"></a>00239                         this.ThreadSafeRedraw();
<a name="l00240"></a>00240                     }
<a name="l00241"></a>00241                 }
<a name="l00242"></a>00242             }
<a name="l00243"></a>00243         }
<a name="l00244"></a>00244                 
<a name="l00248"></a>00248         <span class="keyword">private</span> <span class="keywordtype">void</span> ThreadSafeRedraw(){
<a name="l00249"></a>00249             GLib.IdleHandler hdl = delegate(){
<a name="l00250"></a>00250                 this.QueueDraw();
<a name="l00251"></a>00251                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00252"></a>00252             };
<a name="l00253"></a>00253             GLib.Idle.Add(hdl);
<a name="l00254"></a>00254         }
<a name="l00255"></a>00255         
<a name="l00259"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm#ac7e6abee28e2884d3805627a7ef44ce4">00259</a>         <span class="keyword">public</span> <span class="keyword">event</span> EventHandler Stopped;
<a name="l00260"></a>00260         
<a name="l00264"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a730ad86886d962afd0b398d07cc5a6aa">00264</a>         <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;ErrorEventArgs&gt; Error;
<a name="l00265"></a>00265         
<a name="l00270"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a0ab0271b33b829218cb8259d7c10ef18">00270</a>         <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;BarScannedArgs&gt; BarScanned;
<a name="l00271"></a>00271 
<a name="l00272"></a>00272         <span class="keyword">private</span> <span class="keywordtype">string</span> data = null;
<a name="l00273"></a>00273         <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">int</span> overlayFrameCount = 35;
<a name="l00274"></a>00274         <span class="keyword">private</span> <span class="keywordtype">int</span> overlayingFrames = 0;
<a name="l00275"></a>00275         <span class="keyword">private</span> Pixbuf overlay = Pixbuf.LoadFromResource(<span class="stringliteral">&quot;gtkzbarcil.check.png&quot;</span>);
<a name="l00276"></a>00276         <span class="keyword">private</span> Pixbuf sourceMissing = Pixbuf.LoadFromResource(<span class="stringliteral">&quot;gtkzbarcil.webcam.png&quot;</span>);
<a name="l00277"></a>00277         
<a name="l00282"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a6633e0139f61d441bff48b70908f4073">00282</a>         <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a6633e0139f61d441bff48b70908f4073" title="Resets the last item scanned.">ResetLastItemScanned</a>(){
<a name="l00283"></a>00283             this.data = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00284"></a>00284         }
<a name="l00285"></a>00285         
<a name="l00286"></a>00286         <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keywordtype">bool</span> OnExposeEvent(Gdk.EventExpose ev)
<a name="l00287"></a>00287         {
<a name="l00288"></a>00288             Gdk.Window win = ev.Window;
<a name="l00289"></a>00289             Gdk.Rectangle rect = ev.Area;
<a name="l00290"></a>00290             Gdk.GC gc = this.Style.BaseGC(StateType.Normal);
<a name="l00291"></a>00291             lock(this.drawLock){
<a name="l00292"></a>00292                 <span class="keywordflow">if</span>(this.toDraw != null){
<a name="l00293"></a>00293                     <span class="comment">//Raise events for the symbols...</span>
<a name="l00294"></a>00294                     <span class="keywordtype">bool</span> gotSymbol = <span class="keyword">false</span>;
<a name="l00295"></a>00295                     <span class="comment">//See if there&#39;s a new symbol</span>
<a name="l00296"></a>00296                     <span class="keywordflow">if</span>(this.symbols != null){
<a name="l00297"></a>00297                         <span class="keywordflow">foreach</span>(<a class="code" href="class_z_bar_1_1_symbol.htm" title="Representation of a decoded symbol.">Symbol</a> s <span class="keywordflow">in</span> this.symbols){
<a name="l00298"></a>00298                             <span class="keywordflow">if</span>(s.<a class="code" href="class_z_bar_1_1_symbol.htm#aa0d5ae83420b3e7f6e31ed568b409979">Count</a> &gt; 0 &amp;&amp; <span class="keyword">this</span>.data != s.ToString()){
<a name="l00299"></a>00299                                 this.data = s.ToString();
<a name="l00300"></a>00300                                 <span class="comment">//Don&#39;t raise it inside the expose event :)</span>
<a name="l00301"></a>00301                                 GLib.IdleHandler raiser = delegate(){
<a name="l00302"></a>00302                                     <span class="keywordflow">if</span>(this.<a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a0ab0271b33b829218cb8259d7c10ef18" title="Occurs whenever a bar code have been successfully scanned.">BarScanned</a> != null)
<a name="l00303"></a>00303                                         this.<a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a0ab0271b33b829218cb8259d7c10ef18" title="Occurs whenever a bar code have been successfully scanned.">BarScanned</a>(<span class="keyword">this</span>, <span class="keyword">new</span> <a class="code" href="class_gtk_z_bar_1_1_bar_scanned_args.htm" title="BarScanned event arguments.">BarScannedArgs</a>(s));
<a name="l00304"></a>00304                                     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00305"></a>00305                                 };
<a name="l00306"></a>00306                                 GLib.Idle.Add(raiser);
<a name="l00307"></a>00307                                 gotSymbol = <span class="keyword">true</span>;
<a name="l00308"></a>00308                             }
<a name="l00309"></a>00309                         }
<a name="l00310"></a>00310                     }
<a name="l00311"></a>00311                     <span class="comment">//Avoid beeping more than once..</span>
<a name="l00312"></a>00312                     <span class="keywordflow">if</span>(gotSymbol){
<a name="l00313"></a>00313                         <span class="keywordflow">if</span>(!this.<a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a6c900e4de6a2344d954b3b748b64f2ec">Mute</a>)
<a name="l00314"></a>00314                             System.Media.SystemSounds.Beep.Play();
<a name="l00315"></a>00315                         <span class="keywordflow">if</span>(this.overlayingFrames == 0){
<a name="l00316"></a>00316                             GLib.TimeoutHandler hdl = delegate(){
<a name="l00317"></a>00317                                 this.QueueDraw();
<a name="l00318"></a>00318                                 this.overlayingFrames -= 1;
<a name="l00319"></a>00319                                 <span class="keywordflow">return</span> this.overlayingFrames &gt; 0;
<a name="l00320"></a>00320                             };
<a name="l00321"></a>00321                             GLib.Timeout.Add(35, hdl);
<a name="l00322"></a>00322                         }
<a name="l00323"></a>00323                         <span class="comment">//Start drawing an overlay</span>
<a name="l00324"></a>00324                         this.overlayingFrames = overlayFrameCount;
<a name="l00325"></a>00325                     }
<a name="l00326"></a>00326                     this.symbols = null; <span class="comment">//Symbols have been handled</span>
<a name="l00327"></a>00327                     
<a name="l00328"></a>00328                     <span class="comment">//See if we want to request a resize</span>
<a name="l00329"></a>00329                     <span class="keywordflow">if</span>(this.reqHeight != this.toDrawHeight ||
<a name="l00330"></a>00330                        this.reqWidth != this.toDrawWidth){
<a name="l00331"></a>00331                         this.reqHeight = this.toDrawHeight;
<a name="l00332"></a>00332                         this.reqWidth = this.toDrawWidth;
<a name="l00333"></a>00333                         this.QueueResize();
<a name="l00334"></a>00334                     }
<a name="l00335"></a>00335                     
<a name="l00336"></a>00336                     <span class="comment">//Draw the gray image</span>
<a name="l00337"></a>00337                     <span class="keywordtype">int</span> w = Math.Min (rect.Size.Width, <span class="keyword">this</span>.toDrawWidth);
<a name="l00338"></a>00338                     <span class="keywordtype">int</span> h = Math.Min (rect.Size.Height, <span class="keyword">this</span>.toDrawHeight);
<a name="l00339"></a>00339                     
<a name="l00340"></a>00340                     <span class="comment">//Draw the image</span>
<a name="l00341"></a>00341                     win.DrawGrayImage(gc, 0, 0, w, h, Gdk.RgbDither.Normal, <span class="keyword">this</span>.toDraw, <span class="keyword">this</span>.toDrawWidth);
<a name="l00342"></a>00342                     
<a name="l00343"></a>00343                     <span class="keywordflow">if</span> (this.overlayingFrames &gt; 0) {
<a name="l00344"></a>00344                         
<a name="l00345"></a>00345                         Pixbuf overlay_tmp = overlay;
<a name="l00346"></a>00346                         <span class="keywordflow">if</span> (this.overlay.Width &gt; w * 0.8 || <span class="keyword">this</span>.overlay.Height &gt; h * 0.8) {
<a name="l00347"></a>00347                             <span class="keywordtype">int</span> overlayMaxSize = Math.Min (h * 80 / 100, w * 80 / 100);
<a name="l00348"></a>00348                             overlay_tmp = overlay.ScaleSimple (overlayMaxSize, overlayMaxSize, InterpType.Bilinear);
<a name="l00349"></a>00349                         }
<a name="l00350"></a>00350                         
<a name="l00351"></a>00351                         w = Math.Min(this.toDrawWidth, (<span class="keywordtype">int</span>)overlay_tmp.Width);
<a name="l00352"></a>00352                         h = Math.Min(this.toDrawHeight, (<span class="keywordtype">int</span>)overlay_tmp.Height);
<a name="l00353"></a>00353                         <span class="keyword">using</span>(Gdk.Pixbuf pix = <span class="keyword">new</span> Pixbuf(Colorspace.Rgb, <span class="keyword">true</span>, 8, w, h)){
<a name="l00354"></a>00354                             pix.Fill(0x00000000); <span class="comment">//Fill with invisibility :)</span>
<a name="l00355"></a>00355                             overlay_tmp.Composite(pix, 0, 0, w, h, 0, 0, 1, 1, InterpType.Bilinear, 255 / 35 * <span class="keyword">this</span>.overlayingFrames);
<a name="l00356"></a>00356                             win.DrawPixbuf(gc, pix, 0, 0,
<a name="l00357"></a>00357                                            (this.toDrawWidth - w) / 2, 
<a name="l00358"></a>00358                                            (this.toDrawHeight - h) / 2, w, h, RgbDither.Normal, 0, 0);
<a name="l00359"></a>00359                         }
<a name="l00360"></a>00360                     }
<a name="l00361"></a>00361                 }<span class="keywordflow">else</span>{
<a name="l00362"></a>00362                     win.DrawRectangle(gc, <span class="keyword">true</span>, rect);
<a name="l00363"></a>00363                     
<a name="l00364"></a>00364                     <span class="keywordtype">int</span> w = Math.Min(this.toDrawWidth, (<span class="keywordtype">int</span>)this.sourceMissing.Width);
<a name="l00365"></a>00365                     <span class="keywordtype">int</span> h = Math.Min(this.toDrawHeight, (<span class="keywordtype">int</span>)this.sourceMissing.Height);
<a name="l00366"></a>00366                     
<a name="l00367"></a>00367                     Rectangle img = <span class="keyword">new</span> Rectangle((this.toDrawWidth - w) / 2,
<a name="l00368"></a>00368                                                   (this.toDrawHeight - h) / 2,
<a name="l00369"></a>00369                                                   w, h);
<a name="l00370"></a>00370                     Rectangle target = Rectangle.Intersect(img, rect);
<a name="l00371"></a>00371                     <span class="keywordflow">if</span>(target != Rectangle.Zero){
<a name="l00372"></a>00372                         win.DrawPixbuf(gc, this.sourceMissing, 
<a name="l00373"></a>00373                                        Math.Max(target.X - img.X, 0), 
<a name="l00374"></a>00374                                        Math.Max(target.Y - img.Y, 0), 
<a name="l00375"></a>00375                                        target.X,
<a name="l00376"></a>00376                                        target.Y,
<a name="l00377"></a>00377                                        target.Width,
<a name="l00378"></a>00378                                        target.Height,
<a name="l00379"></a>00379                                        RgbDither.Normal, 0, 0);
<a name="l00380"></a>00380                     }
<a name="l00381"></a>00381                 }
<a name="l00382"></a>00382             }
<a name="l00383"></a>00383             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00384"></a>00384         }
<a name="l00385"></a>00385         
<a name="l00386"></a>00386         <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keywordtype">void</span> OnSizeAllocated(Gdk.Rectangle allocation){
<a name="l00387"></a>00387             base.OnSizeAllocated(allocation);
<a name="l00388"></a>00388             this.AllocatedWidth = allocation.Width;
<a name="l00389"></a>00389             this.AllocatedHeight = allocation.Height;
<a name="l00390"></a>00390         }
<a name="l00391"></a>00391         
<a name="l00392"></a>00392         <span class="keyword">private</span> <span class="keywordtype">int</span> AllocatedWidth;
<a name="l00393"></a>00393         <span class="keyword">private</span> <span class="keywordtype">int</span> AllocatedHeight;
<a name="l00394"></a>00394         
<a name="l00395"></a>00395         <span class="keyword">private</span> <span class="keywordtype">int</span> reqHeight = 480;
<a name="l00396"></a>00396         <span class="keyword">private</span> <span class="keywordtype">int</span> reqWidth = 360;
<a name="l00397"></a>00397         
<a name="l00398"></a>00398         <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keywordtype">void</span> OnSizeRequested(ref Gtk.Requisition requisition){
<a name="l00399"></a>00399             <span class="comment">// Calculate desired size here.</span>
<a name="l00400"></a>00400             requisition.Height = this.reqHeight;
<a name="l00401"></a>00401             requisition.Width = this.reqWidth;
<a name="l00402"></a>00402         }
<a name="l00403"></a>00403         
<a name="l00407"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a6c900e4de6a2344d954b3b748b64f2ec">00407</a>         <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a6c900e4de6a2344d954b3b748b64f2ec">Mute</a>{<span class="keyword">get</span>; <span class="keyword">set</span>;}
<a name="l00408"></a>00408         
<a name="l00416"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a2581dc5d6b4482fbc6797b2e890700bd">00416</a>         <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a2581dc5d6b4482fbc6797b2e890700bd">Flip</a> { <span class="keyword">get</span>; <span class="keyword">set</span>; }
<a name="l00417"></a>00417         
<a name="l00424"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a5b485c09e6a6fb18528baea27d00bda4">00424</a>         <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a5b485c09e6a6fb18528baea27d00bda4">Rotate</a> { <span class="keyword">get</span>; <span class="keyword">set</span>; }
<a name="l00425"></a>00425 
<a name="l00432"></a>00432         <span class="comment">//public int Size { get; set; }</span>
<a name="l00433"></a>00433         
<a name="l00454"></a><a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a0ca8a05aaf362375f24042adf83a214f">00454</a>         <span class="keyword">public</span> <span class="keyword">static</span> IDictionary&lt;string, string&gt; <a class="code" href="class_gtk_z_bar_1_1_scanner.htm#a0ca8a05aaf362375f24042adf83a214f" title="List potential video sources on the system.">ListVideoSources</a>(){
<a name="l00455"></a>00455             var retval = <span class="keyword">new</span> Dictionary&lt;string, string&gt;();
<a name="l00456"></a>00456             <span class="comment">//Runtime platform check, see http://www.mono-project.com/FAQ:_Technical</span>
<a name="l00457"></a>00457             <span class="keywordtype">int</span> p = (int) Environment.OSVersion.Platform;
<a name="l00458"></a>00458             <span class="keywordflow">if</span>((p == (<span class="keywordtype">int</span>)PlatformID.Unix) || (p == (<span class="keywordtype">int</span>)PlatformID.MacOSX) || (p == 128)) {
<a name="l00459"></a>00459                 <span class="comment">//Assume we&#39;re on Linux, if it&#39;s MacOS X we&#39;ll die because libzbar is missing</span>
<a name="l00460"></a>00460                 <span class="keywordflow">try</span>{
<a name="l00461"></a>00461                     <span class="comment">//This can probably be done smarter, using HAL, however, AFAIK</span>
<a name="l00462"></a>00462                     <span class="comment">//it is in the process of being replaced by DeviceKit so let&#39;s</span>
<a name="l00463"></a>00463                     <span class="comment">//not start touching something that is unlikely to work...</span>
<a name="l00464"></a>00464 <span class="preprocessor">#if UDEV_RULES</span>
<a name="l00465"></a>00465 <span class="preprocessor"></span>                    <span class="keywordflow">try</span>{
<a name="l00466"></a>00466                         <span class="comment">//A small hack that depends on Ubuntu&#39;s udev rules, to find a name</span>
<a name="l00467"></a>00467                         <span class="comment">//See /lib/udev/rules.d/60-persistent-v4l.rules</span>
<a name="l00468"></a>00468                         <span class="keywordflow">foreach</span>(var device <span class="keywordflow">in</span> Directory.GetFiles(<span class="stringliteral">&quot;/dev/v4l/by-id/&quot;</span>)){
<a name="l00469"></a>00469                             var name = Path.GetFileName(device);
<a name="l00470"></a>00470                             name = name.Remove(0, name.IndexOf(<span class="stringliteral">&quot;_&quot;</span>) + 1);
<a name="l00471"></a>00471                             name = name.Remove(name.IndexOf(<span class="stringliteral">&quot;-video-index&quot;</span>));
<a name="l00472"></a>00472                             <span class="keywordflow">if</span>(name == <span class="keywordtype">string</span>.Empty)
<a name="l00473"></a>00473                                 <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Hack that jumps aways from here :) &quot;</span>);
<a name="l00474"></a>00474                             retval.Add(name, device);
<a name="l00475"></a>00475                         }
<a name="l00476"></a>00476                     }
<a name="l00477"></a>00477                     <span class="keywordflow">catch</span>{
<a name="l00478"></a>00478                         <span class="comment">//rescue if the hack fails... :)</span>
<a name="l00479"></a>00479                         <span class="keywordflow">foreach</span>(var device <span class="keywordflow">in</span> Directory.GetFiles(<span class="stringliteral">&quot;/dev/&quot;</span>, <span class="stringliteral">&quot;video*&quot;</span>)){
<a name="l00480"></a>00480                             <span class="comment">//I can at least add a space to make it look good :)</span>
<a name="l00481"></a>00481                             var name = <span class="stringliteral">&quot;Video &quot;</span> + Path.GetFileName(device).Remove(0, 5);
<a name="l00482"></a>00482                             retval.Add(name, device);
<a name="l00483"></a>00483                         }
<a name="l00484"></a>00484                     }
<a name="l00485"></a>00485 <span class="preprocessor">#else</span>
<a name="l00486"></a>00486 <span class="preprocessor"></span>                    <span class="keywordflow">foreach</span>(var device <span class="keywordflow">in</span> Directory.GetFiles(<span class="stringliteral">&quot;/dev/&quot;</span>, <span class="stringliteral">&quot;video*&quot;</span>)){
<a name="l00487"></a>00487                         <span class="keywordtype">string</span> name = null;
<a name="l00488"></a>00488                         <span class="comment">//Assume it supports capture</span>
<a name="l00489"></a>00489                         <span class="keywordtype">bool</span> supports_capture = <span class="keyword">true</span>;
<a name="l00490"></a>00490                         
<a name="l00491"></a>00491                         <span class="comment">//Attempt to use /lib/udev/v4l_id a small program used in udev rules, but seems to be available to userspace</span>
<a name="l00492"></a>00492                         <span class="comment">//v4l_id is afaik not documented, but it&#39;s short and the source can be found in extras/v4l_id/v4l_id.c</span>
<a name="l00493"></a>00493                         <span class="comment">//of the udev development tree: linux/hotplug/udev.git</span>
<a name="l00494"></a>00494                         <span class="comment">//See: http://git.kernel.org/?p=linux/hotplug/udev.git;a=blob;f=extras/v4l_id/v4l_id.c;hb=HEAD</span>
<a name="l00495"></a>00495                         <span class="keywordflow">try</span>{
<a name="l00496"></a>00496                             <span class="keyword">using</span>(Process v4l_id = <span class="keyword">new</span> Process()){
<a name="l00497"></a>00497                                 v4l_id.StartInfo.UseShellExecute = <span class="keyword">false</span>;
<a name="l00498"></a>00498                                 v4l_id.StartInfo.FileName = <span class="stringliteral">&quot;/lib/udev/v4l_id&quot;</span>;
<a name="l00499"></a>00499                                 v4l_id.StartInfo.CreateNoWindow = <span class="keyword">true</span>;
<a name="l00500"></a>00500                                 v4l_id.StartInfo.Arguments = device;
<a name="l00501"></a>00501                                 v4l_id.StartInfo.RedirectStandardOutput = <span class="keyword">true</span>;
<a name="l00502"></a>00502                                 v4l_id.Start();
<a name="l00503"></a>00503                                 <span class="keywordtype">string</span> input;
<a name="l00504"></a>00504                                 <span class="keywordflow">while</span>((input = v4l_id.StandardOutput.ReadLine()) != null){
<a name="l00505"></a>00505                                     <span class="keywordflow">if</span>(input.StartsWith(<span class="stringliteral">&quot;ID_V4L_PRODUCT=&quot;</span>))
<a name="l00506"></a>00506                                         name = input.Remove(0, 15);
<a name="l00507"></a>00507                                     <span class="keywordflow">if</span>(input.StartsWith(<span class="stringliteral">&quot;ID_V4L_CAPABILITIES=&quot;</span>))
<a name="l00508"></a>00508                                         supports_capture = input.Contains(<span class="stringliteral">&quot;:capture:&quot;</span>);
<a name="l00509"></a>00509                                 }
<a name="l00510"></a>00510                                 v4l_id.WaitForExit();
<a name="l00511"></a>00511                                 <span class="keywordflow">if</span>(v4l_id.ExitCode != 0)
<a name="l00512"></a>00512                                     <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Don&#39;t use anything we&#39;ve got here...&quot;</span>);
<a name="l00513"></a>00513                             }
<a name="l00514"></a>00514                         }
<a name="l00515"></a>00515                         <span class="keywordflow">catch</span>(Exception){
<a name="l00516"></a>00516                             <span class="comment">//I can at least add a space to make it look good :)</span>
<a name="l00517"></a>00517                             name = <span class="stringliteral">&quot;Video &quot;</span> + System.IO.Path.GetFileName(device).Remove(0, 5);
<a name="l00518"></a>00518                         }
<a name="l00519"></a>00519                         
<a name="l00520"></a>00520                         <span class="keywordflow">if</span>(supports_capture)
<a name="l00521"></a>00521                             retval.Add(name, device);
<a name="l00522"></a>00522                     }
<a name="l00523"></a>00523 <span class="preprocessor">#endif</span>
<a name="l00524"></a>00524 <span class="preprocessor"></span>                }
<a name="l00525"></a>00525                 <span class="keywordflow">catch</span>{
<a name="l00526"></a>00526                     <span class="comment">//Just ignore any exceptions and add the default video device,</span>
<a name="l00527"></a>00527                     <span class="comment">//if case we&#39;re on a distro/os that doesn&#39;t use /dev/video*</span>
<a name="l00528"></a>00528                     <span class="comment">//for video devices... udev rules maybe... The world is twisted place...</span>
<a name="l00529"></a>00529                     retval.Add(<span class="stringliteral">&quot;Default video device&quot;</span>, <span class="stringliteral">&quot;/dev/video0&quot;</span>);
<a name="l00530"></a>00530                 }
<a name="l00531"></a>00531             }<span class="keywordflow">else</span>{
<a name="l00532"></a>00532                 <span class="comment">//Windows</span>
<a name="l00533"></a>00533                 retval.Add(<span class="stringliteral">&quot;Default video device&quot;</span>, <span class="stringliteral">&quot;/dev/video0&quot;</span>);
<a name="l00534"></a>00534                 <span class="comment">//Don&#39;t care how to find video devices on Windows(R),</span>
<a name="l00535"></a>00535                 <span class="comment">//but /dev/video0 opens the default device... It is a undocumented</span>
<a name="l00536"></a>00536                 <span class="comment">//feature of libzbar, see: zbar-0.10/zbar/video/v4w.c, line 442 - 445</span>
<a name="l00537"></a>00537             }
<a name="l00538"></a>00538             <span class="keywordflow">return</span> retval;
<a name="l00539"></a>00539         }
<a name="l00540"></a>00540     }
<a name="l00541"></a>00541     
<a name="l00545"></a><a class="code" href="class_gtk_z_bar_1_1_error_event_args.htm">00545</a>     <span class="keyword">public</span> <span class="keyword">class </span><a class="code" href="class_gtk_z_bar_1_1_error_event_args.htm" title="Event arguments for the Error event.">ErrorEventArgs</a> : System.EventArgs{
<a name="l00549"></a><a class="code" href="class_gtk_z_bar_1_1_error_event_args.htm#a30e5916af1699e566cbf3616aad95f2f">00549</a>         <span class="keyword">public</span> <span class="keywordtype">string</span> <a class="code" href="class_gtk_z_bar_1_1_error_event_args.htm#a30e5916af1699e566cbf3616aad95f2f">Message</a>{<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;}
<a name="l00550"></a>00550         
<a name="l00554"></a><a class="code" href="class_gtk_z_bar_1_1_error_event_args.htm#a1db246f92426c9d2a4ddfdefa86e2ea7">00554</a>         <span class="keyword">public</span> <a class="code" href="class_z_bar_1_1_z_bar_exception.htm" title="An exception that happened in ZBar.">ZBarException</a> <a class="code" href="class_gtk_z_bar_1_1_error_event_args.htm#a1db246f92426c9d2a4ddfdefa86e2ea7">Exception</a>{<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;}
<a name="l00555"></a>00555         
<a name="l00556"></a>00556         <span class="keyword">public</span> <a class="code" href="class_gtk_z_bar_1_1_error_event_args.htm" title="Event arguments for the Error event.">ErrorEventArgs</a>(<span class="keywordtype">string</span> message){
<a name="l00557"></a>00557             this.<a class="code" href="class_gtk_z_bar_1_1_error_event_args.htm#a30e5916af1699e566cbf3616aad95f2f">Message</a> = message;
<a name="l00558"></a>00558         }
<a name="l00559"></a>00559         
<a name="l00560"></a>00560         <span class="keyword">public</span> ErrorEventArgs(<span class="keywordtype">string</span> message, <a class="code" href="class_z_bar_1_1_z_bar_exception.htm" title="An exception that happened in ZBar.">ZBarException</a> innerException) : this(message) {
<a name="l00561"></a>00561             this.<a class="code" href="class_gtk_z_bar_1_1_error_event_args.htm#a1db246f92426c9d2a4ddfdefa86e2ea7">Exception</a> = innerException;
<a name="l00562"></a>00562         }
<a name="l00563"></a>00563     }
<a name="l00564"></a>00564 }
</pre></div></div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Fri Mar 18 2011 19:02:28 for zbar-sharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
