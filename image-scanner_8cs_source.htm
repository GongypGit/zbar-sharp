<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>zbar-sharp: example/image-scanner/image-scanner.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Packages</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>example/image-scanner/image-scanner.cs</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment"> *  Copyright 2009 (c) Jonas Finnemann Jensen &lt;jopsen@gmail.com&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * </span>
<a name="l00004"></a>00004 <span class="comment"> *  This file is part of the ZBar CIL Wrapper.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> *  The ZBar CIL Wrapper is free software; you can redistribute it</span>
<a name="l00007"></a>00007 <span class="comment"> *  and/or modify it under the terms of the GNU Lesser Public License as</span>
<a name="l00008"></a>00008 <span class="comment"> *  published by the Free Software Foundation; either version 2.1 of</span>
<a name="l00009"></a>00009 <span class="comment"> *  the License, or (at your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> *  The ZBar CIL Wrapper is distributed in the hope that it will be</span>
<a name="l00012"></a>00012 <span class="comment"> *  useful, but WITHOUT ANY WARRANTY; without even the implied warranty</span>
<a name="l00013"></a>00013 <span class="comment"> *  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00014"></a>00014 <span class="comment"> *  GNU Lesser Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> *  You should have received a copy of the GNU Lesser Public License</span>
<a name="l00017"></a>00017 <span class="comment"> *  along with the ZBar CIL Wrapper; if not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> *  Software Foundation, Inc., 51 Franklin St, Fifth Floor,</span>
<a name="l00019"></a>00019 <span class="comment"> *  Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment"> * </span>
<a name="l00021"></a>00021 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 ï»¿using System;
<a name="l00024"></a>00024 <span class="keyword">using</span> System.Collections.Generic;
<a name="l00025"></a>00025 <span class="keyword">using</span> System.Text;
<a name="l00026"></a>00026 <span class="keyword">using</span> System.IO;
<a name="l00027"></a>00027 <span class="keyword">using</span> ZBar;
<a name="l00028"></a>00028 
<a name="l00029"></a><a class="code" href="namespace_example_1_1_image_scanner.htm">00029</a> <span class="keyword">namespace </span>Example.<a class="code" href="class_z_bar_1_1_image_scanner.htm" title="Mid-level image scanner interface. reads barcodes from 2-D images.">ImageScanner</a>
<a name="l00030"></a>00030 {
<a name="l00035"></a><a class="code" href="class_example_1_1_image_scanner_1_1_simple_image_scanner.htm">00035</a>     <span class="keyword">class </span><a class="code" href="class_example_1_1_image_scanner_1_1_simple_image_scanner.htm" title="Simple example program that scans images given as argument.">SimpleImageScanner</a>
<a name="l00036"></a>00036     {
<a name="l00037"></a>00037         <span class="keyword">static</span> <span class="keywordtype">void</span> Main(<span class="keywordtype">string</span>[] args){
<a name="l00038"></a>00038             <span class="comment">//List of files to scan</span>
<a name="l00039"></a>00039             List&lt;string&gt; files = <span class="keyword">new</span> List&lt;string&gt;();
<a name="l00040"></a>00040             
<a name="l00041"></a>00041             <span class="comment">//Copy arguments into files (ignore this part)</span>
<a name="l00042"></a>00042             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 1; i &lt; args.Length; i++){
<a name="l00043"></a>00043                 <span class="keywordflow">if</span>(args[i] == <span class="stringliteral">&quot;--help&quot;</span> || args[i] == <span class="stringliteral">&quot;-h&quot;</span>)
<a name="l00044"></a>00044                     Console.WriteLine(<span class="stringliteral">&quot;Usage ./{0} [file1] [file2] [file3] ...&quot;</span>, args[0]);
<a name="l00045"></a>00045                 <span class="keywordflow">else</span>
<a name="l00046"></a>00046                     files.Add(args[i]);
<a name="l00047"></a>00047             }
<a name="l00048"></a>00048             <span class="keywordflow">if</span>(files.Count == 0)
<a name="l00049"></a>00049                 files.Add(<span class="stringliteral">&quot;barcode.bmp&quot;</span>);
<a name="l00050"></a>00050             
<a name="l00051"></a>00051             <span class="comment">//Create an instance of scanner</span>
<a name="l00052"></a>00052             <span class="keyword">using</span>(var scanner = <span class="keyword">new</span> ZBar.ImageScanner()){
<a name="l00053"></a>00053                 <span class="comment">//We won&#39;t use caching here</span>
<a name="l00054"></a>00054                 scanner.Cache = <span class="keyword">false</span>;
<a name="l00055"></a>00055                 
<a name="l00056"></a>00056                 <span class="comment">//For each file that we need scanned</span>
<a name="l00057"></a>00057                 <span class="keywordflow">foreach</span>(<span class="keywordtype">string</span> file <span class="keywordflow">in</span> files){
<a name="l00058"></a>00058                     Console.WriteLine(<span class="stringliteral">&quot;Symbols in {0}:&quot;</span>, file);
<a name="l00059"></a>00059                     
<a name="l00060"></a>00060                     <span class="comment">//Open the file, using System.Drawing to read it</span>
<a name="l00061"></a>00061                     System.Drawing.Image img = System.Drawing.Image.FromFile(file);
<a name="l00062"></a>00062                     
<a name="l00063"></a>00063                     <span class="comment">//Scan the image for symbols, using System.Drawing and ZBar for conversation</span>
<a name="l00064"></a>00064                     <span class="comment">//Please note that this is no way an efficient implementation, more optimizations</span>
<a name="l00065"></a>00065                     <span class="comment">//of the conversation code etc, could easily be implemented.</span>
<a name="l00066"></a>00066                     List&lt;Symbol&gt; symbols = scanner.Scan(img);
<a name="l00067"></a>00067                     
<a name="l00068"></a>00068                     <span class="comment">//For each symbol we&#39;ve found</span>
<a name="l00069"></a>00069                     <span class="keywordflow">foreach</span>(<a class="code" href="class_z_bar_1_1_symbol.htm" title="Representation of a decoded symbol.">Symbol</a> symbol <span class="keywordflow">in</span> symbols)
<a name="l00070"></a>00070                         Console.WriteLine(<span class="stringliteral">&quot;\t&quot;</span> + symbol.ToString());
<a name="l00071"></a>00071                 }
<a name="l00072"></a>00072             }
<a name="l00073"></a>00073         }
<a name="l00074"></a>00074     }
<a name="l00075"></a>00075 }
</pre></div></div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Sat Mar 19 2011 17:44:19 for zbar-sharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
